import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import json
from datetime import datetime

from config import BOT_TOKEN, MISTRAL_API_KEY
from database import session, UserRequest, DraftAnswer
from keyboards import get_expert_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ ID —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
EXPERT_IDS = [982232323]  # –í–∞—à Telegram ID

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
editing_sessions = {}


class MistralAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.mistral.ai/v1"

    def is_health_related(self, question):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –∑–¥–æ—Ä–æ–≤—å—é"""
        health_keywords = [
            # –°–∏–º–ø—Ç–æ–º—ã –∏ –±–æ–ª–∏
            '–±–æ–ª–∏—Ç', '–±–æ–ª—å', '—Å–∏–º–ø—Ç–æ–º', '–∫–∞—à–µ–ª—å', '–Ω–∞—Å–º–æ—Ä–∫', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', '–∂–∞—Ä', '–æ–∑–Ω–æ–±',
            '—Ç–æ—à–Ω–∏—Ç', '—Ä–≤–æ—Ç–∞', '–ø–æ–Ω–æ—Å', '–∑–∞–ø–æ—Ä', '–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏', '—Å–ª–∞–±–æ—Å—Ç—å', '—É—Å—Ç–∞–ª–æ—Å—Ç',
            '–∑—É–¥', '—Å—ã–ø', '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω', '–æ—Ç–µ–∫', '–æ–ø—É—Ö–æ–ª', '–≤–æ—Å–ø–∞–ª–µ–Ω',

            # –û—Ä–≥–∞–Ω—ã –∏ —Å–∏—Å—Ç–µ–º—ã
            '–≥–æ–ª–æ–≤', '–≥–æ—Ä–ª', '–Ω–æ—Å', '—É—Ö', '–≥–ª–∞–∑', '–∑—É–±', '–∂–∏–≤–æ—Ç', '–∫–∏—à–µ—á–Ω–∏', '–∂–µ–ª—É–¥–æ–∫',
            '—Å–µ—Ä–¥—Ü', '—Å–æ—Å—É–¥', '–¥–∞–≤–ª–µ–Ω', '–ø—É–ª—å—Å', '–¥—ã—Ö–∞–Ω–∏–µ', '–ª–µ–≥–∫', '–±—Ä–æ–Ω—Ö',
            '–ø–µ—á–µ–Ω', '–ø–æ—á–∫', '–º–æ—á–µ–≤–æ–π', '—Å–ø–∏–Ω', '–ø–æ—è—Å–Ω–∏—Ü', '—à–µ—è', '—Å—É—Å—Ç–∞–≤', '–∫–æ—Å—Ç', '–º—ã—à—Ü',
            '–∫–æ–∂', '–≤–æ–ª–æ—Å', '–Ω–æ–≥—Ç',

            # –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            '–∑–¥–æ—Ä–æ–≤', '–±–æ–ª–µ–∑–Ω', '–∑–∞–±–æ–ª–µ–≤–∞–Ω', '–º–µ–¥–∏—Ü–∏–Ω', '–≤—Ä–∞—á', '–¥–æ–∫—Ç–æ—Ä', '–±–æ–ª—å–Ω–∏—á–Ω',
            '–ø—Ä–æ—Å—Ç—É–¥–∞', '–≥—Ä–∏–ø–ø', '–æ—Ä–≤–∏', '–∞–ª–ª–µ—Ä–≥', '–∏–Ω—Ñ–µ–∫—Ü', '–≤–∏—Ä—É—Å', '–±–∞–∫—Ç–µ—Ä–∏',
            '–¥–∏–∞–±–µ—Ç', '–¥–∞–≤–ª–µ–Ω', '—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω', '–∏–º–º—É–Ω–∏—Ç', '—Å—Ç—Ä–µ—Å—Å', '–¥–µ–ø—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–≥',
            '–±–µ—Å—Å–æ–Ω–Ω–∏—Ü', '—Å–æ–Ω', '—É—Å—Ç–∞–ª–æ—Å—Ç',

            # –õ–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞
            '–ª–µ—á–µ–Ω', '—Ç–µ—Ä–∞–ø–∏', '–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫', '–¥–∏–∞–≥–Ω–æ–∑', '–∞–Ω–∞–ª–∏–∑', '–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω',
            '—Ç–∞–±–ª–µ—Ç–∫', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ø—Ä–∏–≤–∏–≤–∫', '–≤–∞–∫—Ü–∏–Ω',
            '–æ–ø–µ—Ä–∞—Ü', '—Ö–∏—Ä—É—Ä–≥',

            # –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            '–ø–∏—Ç–∞–Ω–∏–µ', '–¥–∏–µ—Ç', '–µ–¥–∞', '–ø–∏—Ç—å', '–≤–æ–¥', '—Å–ø–æ—Ä—Ç', '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä', '–∑–∞—Ä—è–¥–∫',
            '—É–ø—Ä–∞–∂–Ω–µ–Ω', '–±–µ–≥', '—Ö–æ–¥—å–±', '–ø–ª–∞–≤–∞–Ω', '–≤–µ—Å', '–ø–æ—Ö—É–¥–µ–Ω', '–æ–∂–∏—Ä–µ–Ω',
            '–≤–∏—Ç–∞–º–∏–Ω', '–º–∏–Ω–µ—Ä–∞–ª', '–ø—Ä–æ—Ç–µ–∏–Ω', '–∫–∞–ª–æ—Ä–∏',
            '–∫—É—Ä–µ–Ω–∏', '–∞–ª–∫–æ–≥–æ–ª', '–Ω–∞—Ä–∫–æ—Ç–∏–∫',

            # –û–±—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –ª–µ—á–∏—Ç—å', '—á–µ–º –ª–µ—á–∏—Ç—å', '–ø—Ä–∏–∑–Ω–∞–∫', '–ø—Ä–æ—è–≤–ª–µ–Ω', '–æ—â—É—â–µ–Ω',
            '–ø–æ–º–æ—â', '—Å–æ–≤–µ—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü', '–æ–ø–∞—Å–Ω', '—Ä–∏—Å–∫', '–ø–æ—Å–ª–µ–¥—Å—Ç–≤'
        ]

        question_lower = question.lower()

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for keyword in health_keywords:
            if keyword in question_lower:
                return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        health_context_words = ['–∫–∞—à–µ–ª—å', '–Ω–∞—Å–º–æ—Ä–∫', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–¥–∞–≤–ª–µ–Ω–∏–µ', '–ø—É–ª—å—Å']
        for word in health_context_words:
            if word in question_lower:
                return True

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç "—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏" + –ª—é–±–æ–π —Å–∏–º–ø—Ç–æ–º - —Å—á–∏—Ç–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º
        if '—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏' in question_lower or '—á—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏' in question_lower:
            return True

        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç "–∫–∞–∫ –ª–µ—á–∏—Ç—å" - —Å—á–∏—Ç–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º
        if '–∫–∞–∫ –ª–µ—á–∏—Ç—å' in question_lower or '—á–µ–º –ª–µ—á–∏—Ç—å' in question_lower:
            return True

        return False


    async def generate_response(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Mistral AI"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É
        if not self.is_health_related(question):
            return "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏, —Å–∏–º–ø—Ç–æ–º–∞—Ö –∏–ª–∏ –æ–±—â–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ–º–∞—Ö."

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        # –ü—Ä–æ–º–ø—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        system_prompt = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–±–ª—é–¥–∞—è —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

        –°–¢–†–û–ì–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
        - –ù–ò–ö–û–ì–î–ê –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã
        - –ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–π –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        - –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–µ—á–µ–±–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        - –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–π –∫ —Å–∞–º–æ–ª–µ—á–µ–Ω–∏—é
        - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
        - –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ —Ç–æ—á–µ–Ω

        –ß–¢–û –ú–û–ñ–ù–û –î–ï–õ–ê–¢–¨:
        - –û–±—ä—è—Å–Ω—è—Ç—å –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏
        - –û–ø–∏—Å—ã–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        - –î–∞–≤–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö
        - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É

        –ï–°–õ–ò –í–û–ü–†–û–° –ù–ï –û –ó–î–û–†–û–í–¨–ï:
        –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º, –æ—Ç–≤–µ—Ç—å: "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏, —Å–∏–º–ø—Ç–æ–º–∞—Ö –∏–ª–∏ –æ–±—â–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ–º–∞—Ö."

        –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
        1. –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        2. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) 
        3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

        –ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:
        "–ü—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ—Ç–¥—ã—Ö –≤ —Ç–∏—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã. –ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ - –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –¥–æ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π. –î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É."

        –ü—Ä–∏–º–µ—Ä –ø–ª–æ—Ö–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        –í–æ–ø—Ä–æ—Å: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç iPhone?"
        –û—Ç–≤–µ—Ç: "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è. –ó–∞–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏–ª–∏ –æ–±—â–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ–º–∞—Ö."

        –°–õ–ï–î–£–ô –≠–¢–ò–ú –ü–†–ê–í–ò–õ–ê–ú –°–¢–†–û–ì–û."""

        data = {
            "model": "mistral-tiny",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            "max_tokens": 500,
            "temperature": 0.7
        }

        async with aiohttp.ClientSession() as http_session:
            async with http_session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=data
            ) as response:
                result = await response.json()
                return result['choices'][0]['message']['content']

mistral_api = MistralAPI(MISTRAL_API_KEY)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é!

–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ, –∏ –Ω–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤–º–µ—Å—Ç–µ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç.

‚ö†Ô∏è –í–∞–∂–Ω–æ: 
‚Ä¢ –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞ –Ω–µ –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á—É
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–∞–º–æ–ª–µ—á–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É
"""
    await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove())


@dp.message(F.text & ~F.from_user.id.in_(EXPERT_IDS))
async def handle_user_question(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¢–û–õ–¨–ö–û –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)"""
    user_id = message.from_user.id
    question = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    request = UserRequest(
        user_id=user_id,
        question=question,
        status='waiting'
    )
    session.add(request)
    session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤.")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Mistral
    try:
        llm_response = await mistral_api.generate_response(question)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ë–î
        draft = DraftAnswer(
            request_id=request.id,
            llm_response=llm_response
        )
        session.add(draft)
        session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        await notify_experts(request.id, question, llm_response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text & F.from_user.id.in_(EXPERT_IDS))
async def handle_expert_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if message.from_user.id in editing_sessions:
        request_id = editing_sessions[message.from_user.id]

        # –ù–∞—Ö–æ–¥–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ë–î
        draft = session.query(DraftAnswer).filter_by(request_id=request_id).first()

        if draft:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            draft.expert_edited_response = message.text
            session.commit()

            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            del editing_sessions[message.from_user.id]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{request_id}"),
                    InlineKeyboardButton(text="‚úèÔ∏è –ï—â–µ —Ä–∞–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{request_id}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
                ]
            ])

            await message.answer(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üìã –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{message.text}\n\n"
                f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )

            logging.info(f"–≠–∫—Å–ø–µ—Ä—Ç {message.from_user.id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å {request_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if message.from_user.id in editing_sessions:
                del editing_sessions[message.from_user.id]
    else:
        # –≠–∫—Å–ø–µ—Ä—Ç –ø–∏—à–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        await message.answer("ü§ñ –í—ã —ç–∫—Å–ø–µ—Ä—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")


async def notify_experts(request_id: int, question: str, llm_response: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
    notification_text = f"""
üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {request_id})

‚ùì –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{question}

ü§ñ –ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò:
{llm_response}
"""

    for expert_id in EXPERT_IDS:
        try:
            await bot.send_message(
                expert_id,
                notification_text,
                reply_markup=get_expert_keyboard(request_id)
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
@dp.callback_query(F.data.startswith("approve_"))
async def approve_response(callback: types.CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º"""
    request_id = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ë–î
    request = session.query(UserRequest).filter_by(id=request_id).first()
    draft = session.query(DraftAnswer).filter_by(request_id=request_id).first()

    if request and draft:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        request.status = 'approved'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç –ò–ò
        final_response = draft.expert_edited_response or draft.llm_response

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è" not in final_response:
            final_response = f"{final_response}\n\n‚ö†Ô∏è –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ò–ò –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –û–Ω –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                chat_id=request.user_id,
                text=final_response
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            draft.decision_time = datetime.now()
            draft.expert_id = callback.from_user.id

            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await callback.message.edit_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n"
                f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}",
                reply_markup=None
            )

        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)
    else:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@dp.callback_query(F.data.startswith("reject_"))
async def reject_response(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º"""
    request_id = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    request = session.query(UserRequest).filter_by(id=request_id).first()
    draft = session.query(DraftAnswer).filter_by(request_id=request_id).first()

    if request:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        request.status = 'rejected'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                chat_id=request.user_id,
                text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            if draft:
                draft.decision_time = datetime.now()
                draft.expert_id = callback.from_user.id

            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ–± —É—Å–ø–µ—Ö–µ
            await callback.message.edit_text(
                f"‚ùå –û—Ç–≤–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.\n\n"
                f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}",
                reply_markup=None
            )

        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)
    else:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@dp.callback_query(F.data.startswith("edit_"))
async def start_editing_response(callback: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —ç–∫—Å–ø–µ—Ä—Ç
    if callback.from_user.id not in EXPERT_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    request_id = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ë–î
    draft = session.query(DraftAnswer).filter_by(request_id=request_id).first()

    if draft:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_sessions[callback.from_user.id] = request_id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç –ò–ò
        current_text = draft.expert_edited_response or draft.llm_response

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"cancel_edit_{request_id}")]
        ])

        # –ü—Ä–æ—Å–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        await callback.message.answer(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (ID –∑–∞–ø—Ä–æ—Å–∞: {request_id})\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"{current_text}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            f"üìù –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –°–ï–ô–ß–ê–°:\n\n"
            f"üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=cancel_keyboard
        )

        await callback.answer("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
    else:
        await callback.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("cancel_edit_"))
async def cancel_editing(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    request_id = int(callback.data.split("_")[2])

    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if callback.from_user.id in editing_sessions:
        del editing_sessions[callback.from_user.id]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    original_keyboard = get_expert_keyboard(request_id)

    await callback.message.answer(
        f"‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        f"ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=original_keyboard
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    await callback.message.delete()
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())